<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时雨</title>
  
  <subtitle>理科生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-04T01:48:11.533Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>时雨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git</title>
    <link href="http://example.com/2021/04/04/Git/"/>
    <id>http://example.com/2021/04/04/Git/</id>
    <published>2021-04-04T01:45:56.000Z</published>
    <updated>2021-04-04T01:48:11.533Z</updated>
    
    <content type="html"><![CDATA[<!-- GFM-TOC --><ul><li><a href="#%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99">学习资料</a></li><li><a href="#%E9%9B%86%E4%B8%AD%E5%BC%8F%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F">集中式与分布式</a></li><li><a href="#git-%E7%9A%84%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%E5%99%A8">Git 的中心服务器</a></li><li><a href="#git-%E5%B7%A5%E4%BD%9C%E6%B5%81">Git 工作流</a></li><li><a href="#%E5%88%86%E6%94%AF%E5%AE%9E%E7%8E%B0">分支实现</a></li><li><a href="#%E5%86%B2%E7%AA%81">冲突</a></li><li><a href="#fast-forward">Fast forward</a></li><li><a href="#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5">分支管理策略</a></li><li><a href="#%E5%82%A8%E8%97%8Fstashing">储藏（Stashing）</a></li><li><a href="#ssh-%E4%BC%A0%E8%BE%93%E8%AE%BE%E7%BD%AE">SSH 传输设置</a></li><li><a href="#gitignore-%E6%96%87%E4%BB%B6">.gitignore 文件</a></li><li><a href="#git-%E5%91%BD%E4%BB%A4%E4%B8%80%E8%A7%88">Git 命令一览</a><!-- GFM-TOC --></li></ul><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git - 简明指南</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解 Git</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰 : Git 教程</a></li><li><a href="https://learngitbranching.js.org/">Learn Git Branching</a></li></ul><h1 id="集中式与分布式"><a href="#集中式与分布式" class="headerlink" title="集中式与分布式"></a>集中式与分布式</h1><p>Git 属于分布式版本控制系统，而 SVN 属于集中式。</p><p>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。</p><p>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。</p><p>集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件的会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。</p><p>分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。</p><h1 id="Git-的中心服务器"><a href="#Git-的中心服务器" class="headerlink" title="Git 的中心服务器"></a>Git 的中心服务器</h1><p>Git 的中心服务器用来交换每个用户的修改。没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。Github 就是一种 Git 中心服务器。</p><h1 id="Git-工作流"><a href="#Git-工作流" class="headerlink" title="Git 工作流"></a>Git 工作流</h1><div align="center"> <img src="../pics//a1198642-9159-4d88-8aec-c3b04e7a2563.jpg"/> </div><br><p>新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。</p><p>Git 版本库有一个称为 stage 的暂存区，还有自动创建的 master 分支以及指向分支的 HEAD 指针。</p><div align="center"> <img src="../pics//46f66e88-e65a-4ad0-a060-3c63fe22947c.png"/> </div><br><ul><li>git add files 把文件的修改添加到暂存区</li><li>git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了</li><li>git reset – files 使用当前分支上的修改覆盖暂缓区，用来撤销最后一次 git add files</li><li>git checkout – files 使用暂存区的修改覆盖工作目录，用来撤销本地修改</li></ul><div align="center"> <img src="../pics//17976404-95f5-480e-9cb4-250e6aa1d55f.png"/> </div><br><p>可以跳过暂存区域直接从分支中取出修改或者直接提交修改到分支中</p><ul><li>git commit -a 直接把所有文件的修改添加到暂缓区然后执行提交</li><li>git checkout HEAD – files 取出最后一次修改，可以用来进行回滚操作</li></ul><h1 id="分支实现"><a href="#分支实现" class="headerlink" title="分支实现"></a>分支实现</h1><p>Git 把每次提交都连成一条时间线。分支使用指针来实现，例如 master 分支指针指向时间线的最后一个节点，也就是最后一次提交。HEAD 指针指向的是当前分支。</p><div align="center"> <img src="../pics//fb546e12-e1fb-4b72-a1fb-8a7f5000dce6.jpg"/> </div><br><p>新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支表示新分支成为当前分支。</p><div align="center"> <img src="../pics//bc775758-89ab-4805-9f9c-78b8739cf780.jpg"/> </div><br><p>每次提交只会让当前分支向前移动，而其它分支不会移动。</p><div align="center"> <img src="../pics//5292faa6-0141-4638-bf0f-bb95b081dcba.jpg"/> </div><br><p>合并分支也只需要改变指针即可。</p><div align="center"> <img src="../pics//1164a71f-413d-494a-9cc8-679fb6a2613d.jpg"/> </div><br><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。</p><div align="center"> <img src="../pics//58e57a21-6b6b-40b6-af85-956dd4e0f55a.jpg"/> </div><br><p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><h1 id="Fast-forward"><a href="#Fast-forward" class="headerlink" title="Fast forward"></a>Fast forward</h1><p>“快进式合并”（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。</p><p>可以在合并时加上 –no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><div align="center"> <img src="../pics//dd78a1fe-1ff3-4bcf-a56f-8c003995beb6.jpg"/> </div><br><h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><p>master 分支应该是非常稳定的，只用来发布新版本；</p><p>日常开发在开发分支 dev 上进行。</p><div align="center"> <img src="../pics//245fd2fb-209c-4ad5-bc5e-eb5664966a0e.jpg"/> </div><br><h1 id="储藏（Stashing）"><a href="#储藏（Stashing）" class="headerlink" title="储藏（Stashing）"></a>储藏（Stashing）</h1><p>在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。</p><p>可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈上，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state \ &quot;WIP on master: 049d078 added the index file&quot;</span><br><span class="line">HEAD is now at 049d078 added the index file (To restore them type &quot;git stash apply&quot;)</span><br></pre></td></tr></table></figure><p>该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。</p><h1 id="SSH-传输设置"><a href="#SSH-传输设置" class="headerlink" title="SSH 传输设置"></a>SSH 传输设置</h1><p>Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。</p><p>如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>然后把公钥 id_rsa.pub 的内容复制到 Github “Account settings” 的 SSH Keys 中。</p><h1 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h1><p>忽略以下文件：</p><ul><li>操作系统自动生成的文件，比如缩略图；</li><li>编译生成的中间文件，比如 Java 编译产生的 .class 文件；</li><li>自己的敏感信息，比如存放口令的配置文件。</li></ul><p>不需要全部自己编写，可以到 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> 中进行查询。</p><h1 id="Git-命令一览"><a href="#Git-命令一览" class="headerlink" title="Git 命令一览"></a>Git 命令一览</h1><div align="center"> <img src="../pics//7a29acce-f243-4914-9f00-f2988c528412.jpg"/> </div><br><p>比较详细的地址：<a href="http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf">http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- GFM-TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99&quot;&gt;学习资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%9B%86%E4%B8%AD%E5%BC%8F%E4%B8%8E%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>庄子</title>
    <link href="http://example.com/2021/04/04/%E5%BA%84%E5%AD%90/"/>
    <id>http://example.com/2021/04/04/%E5%BA%84%E5%AD%90/</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-04-03T16:48:25.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="庄子"><a href="#庄子" class="headerlink" title="庄子"></a>庄子</h2><h3 id="齐物论"><a href="#齐物论" class="headerlink" title="齐物论"></a>齐物论</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>南郭子綦隐机而坐，仰天而嘘，荅焉似丧其耦。颜成子游立侍乎前，曰：“何居乎？形固可使如槁木，而心固可使如死灰乎？今之隐机者，非昔之隐机者也？”子綦曰：“偃，不亦善乎，而问之也！今者吾丧我，汝知之乎？女闻人籁而未闻地籁，女闻地籁而不闻天籁夫！” 子游曰：“敢问其方。”子綦曰：“夫大块噫气，其名为风。是唯无作，作则万窍怒呺。而独不闻之翏翏乎？山林之畏佳，大木百围之窍穴，似鼻，似口，似耳，似枅，似圈，似臼，似洼者，似污者。激者、謞者、叱者、吸者、叫者、譹者、宎者，咬者，前者唱于而随者唱喁，泠风则小和，飘风则大和，厉风济则众窍为虚。而独不见之调调之刁刁乎？” 子游曰：“地籁则众窍是已，人籁则比竹是已，敢问天籁。”子綦曰：“夫吹万不同，而使其自己也。咸其自取，怒者其谁邪？”</p><p>坐忘</p><ol><li><p>白马非马，白色的马是具体的概念，马是抽象的概念，所以两者不能等同，但是庄子认为不如说马不是白马，把重心从白马的具体概念转移到马的抽象概念中，说天地一马也，不要将注意力放在具体的事物上，而放在更抽象的概念上，极高的抽象程度，天地就相当于一马的概念，即道</p></li><li><p>后接道的概念</p><ol><li><p>道行之而可，物谓之而然：道可具体，像道路一样，也可抽象</p></li><li><p>厉与西施，道通唯一，中国哲学的重要特点，整体观：</p><p>​    1. 但是实际中人做事，其分也，成也；成也，毁也。</p><p>​    分割来看待问题，研究深入，好像成功，但成功了破坏整体    性，也是一种毁</p><ol start="2"><li>凡物无成与毁，复通唯一。实际上没有成和毁，人类文明在宇宙尺度上是沧海一粟，漂亮女孩一百年也化为枯骨，研究的科学成果也可能人类灭亡后不复存在，宇宙仍然是冰冷的，最后复通为一，人生无所谓有无意义，没有成与亏，从更高的跳出社会束缚的概念来看的话</li></ol></li></ol></li></ol>]]></content>
    
    
    <summary type="html">读庄子的一点小感想</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA_WEB</title>
    <link href="http://example.com/2021/04/04/java_web/"/>
    <id>http://example.com/2021/04/04/java_web/</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-04-03T17:13:24.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>web 应用服务器：Tomcat,jboos,weblogic</p><ol><li>作用：把应用部署到服务器的tomcat里面，然后通过ip 地址来访问这个应用，就像本地数据库访问和访问百度网址一样</li><li>服务器-后端-数据库，即完成部署，之前都是单机版</li><li>tomcat <ol><li>bin:存放各个平台下启动和停止tomcat服务的脚本文件</li><li>conf:存放各种Tomcat服务器的配置文件，conf里面的端口，可以区分是微信还是qq。 通过port:8080访问tomcat服务</li><li>lib:存放jar文件（包）</li><li>logs:存放日志信息，记录tomcat服务运行情况，有问题可以通过查看日志来解决</li></ol></li></ol><h2 id="Web项目结构"><a href="#Web项目结构" class="headerlink" title="Web项目结构"></a>Web项目结构</h2><ol><li><p>External Library:包，轮子</p></li><li><p>src:我们编写的程序，应用核心调用轮子</p></li><li><p>web:配工程里面的一些信息</p><ol><li><p>WEB-INF</p><p>index.jsp html的高级版，</p><p>web.xml配置应用里面的信息，就像server.xml配tomcat的信息</p></li></ol></li><li><p>idea run conf 配置tomcat 添加tomcat server</p><p>app server conf链接本地tomcat</p><p>browser是打开的浏览器</p><p>url 8080自己的端口，加上打包进tomcat的应用程序即用 art打包项目进tomcat 而不是文件夹</p></li><li><p>bilibili网址底层也是端口ip形式，只是通过映射把端口映射成.com.若停止tomcat,则刷新就没有了 因为服务器没了</p></li></ol><p><img src="C:\Users\时雨\AppData\Roaming\Typora\typora-user-images\image-20210403221412802.png" alt="image-20210403221412802"></p><ol start="6"><li>ip找到电脑，port是端口，pn是tomcat里面的类因为可以有很多个类的程序</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Tomcat&quot;&gt;&lt;a href=&quot;#Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Tomcat&quot;&gt;&lt;/a&gt;Tomcat&lt;/h2&gt;&lt;p&gt;web 应用服务器：Tomcat,jboos,weblogic&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作用：把应用部署到</summary>
      
    
    
    
    
  </entry>
  
</feed>
